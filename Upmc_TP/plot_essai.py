# -*- coding: utf-8 -*-
"""
Created on Sun Dec 06 18:07:04 2015

@author: emmanuel
"""

import numpy as np
import matplotlib.pyplot as plt

if False:
    X = np.linspace(-np.pi, np.pi, 256, endpoint=True)
    C,S = np.cos(X), np.sin(X)
    
    plt.plot(X,C)
    plt.plot(X,S)
    
    plt.show()


if False:
    # Create a new figure of size 8x6 points, using 100 dots per inch
    plt.figure(figsize=(8,6), dpi=80)
    
    # Create a new subplot from a grid of 1x1
    plt.subplot(111)
    
    X = np.linspace(-np.pi, np.pi, 256,endpoint=True)
    C,S = np.cos(X), np.sin(X)
    
    # Plot cosine using blue color with a continuous line of width 1 (pixels)
    plt.plot(X, C, color="blue", linewidth=1.0, linestyle="-")
    
    # Plot sine using green color with a continuous line of width 1 (pixels)
    plt.plot(X, S, color="green", linewidth=1.0, linestyle="-")
    
    # Set x limits
    plt.xlim(-4.0,4.0)
    
    # Set x ticks
    plt.xticks(np.linspace(-4,4,9,endpoint=True))
    
    # Set y limits
    plt.ylim(-1.0,1.0)
    
    # Set y ticks
    plt.yticks(np.linspace(-1,1,5,endpoint=True))
    
    # Save figure using 72 dots per inch
    # savefig("../figures/exercice_2.png",dpi=72)
    
    # Show result on screen
    plt.show()


if False:
    fig, ax1 = plt.subplots()
    t = np.arange(0.01, 10.0, 0.01)
    s1 = np.exp(t)
    ax1.plot(t, s1, 'b-')
    ax1.set_xlabel('time (s)')
    # Make the y-axis label and tick labels match the line color.
    ax1.set_ylabel('exp', color='b')
    for tl in ax1.get_yticklabels():
        tl.set_color('b')
    plt.title("Action Air Liquide")
    plt.xlabel("Date")
    plt.ylabel("Volume")
    
    
    ax2 = ax1.twinx()
    s2 = np.sin(2*np.pi*t)
    ax2.plot(t, s2, 'r.')
    ax2.set_ylabel('sin', color='r')
    for tl in ax2.get_yticklabels():
        tl.set_color('r')
    plt.ylabel("Action")

    plt.show()


import numpy as np
import matplotlib.dates as md
import pylab as plt

def reord(date_d, data_d):
    """
    RÃ©ordonne les valeurs dans l'ordre croissant des dates
    date_d : le tableau des dates
    data_d : le tableau des valeurs
    """
    import operator
    ind = range(len(date_d))
    dt = dict(zip(ind,date_d))
    ds = sorted(dt.iteritems(), key=operator.itemgetter(1))
    date_out, data_out = [], []
    for d in ds:
        date_out.append(d[1])
        data_out.append(data_d[d[0]])
    return date_out, data_out

#date_r = [5.,4.,3.,2.,1.]
#close_r = [115.,114.,113.,112.,111.]

date_r = [735572.0, 735575.0, 735576.0, 735577.0, 735578.0, 735579.0, 735582.0, 735583.0, 735584.0, 735585.0, 735586.0, 735589.0, 735590.0, 735591.0, 735592.0, 735593.0, 735596.0, 735597.0, 735598.0, 735599.0, 735600.0, 735603.0, 735604.0, 735605.0, 735606.0, 735607.0, 735610.0, 735611.0, 735612.0, 735613.0, 735614.0, 735617.0, 735618.0, 735619.0, 735620.0, 735621.0, 735624.0, 735625.0, 735626.0, 735627.0, 735628.0, 735631.0, 735632.0, 735633.0, 735634.0, 735635.0, 735638.0, 735639.0, 735640.0, 735641.0, 735642.0, 735645.0, 735646.0, 735647.0, 735648.0, 735649.0, 735652.0, 735653.0, 735654.0, 735655.0, 735656.0, 735659.0, 735660.0, 735661.0, 735662.0, 735663.0, 735666.0, 735667.0, 735668.0, 735669.0, 735670.0, 735673.0, 735674.0, 735675.0, 735676.0, 735677.0, 735680.0, 735681.0, 735682.0, 735683.0, 735684.0, 735687.0, 735688.0, 735689.0, 735690.0, 735691.0, 735694.0, 735695.0, 735696.0, 735697.0, 735698.0, 735701.0, 735702.0, 735703.0, 735704.0, 735705.0, 735708.0, 735709.0, 735710.0, 735711.0, 735712.0, 735715.0, 735716.0, 735717.0, 735718.0, 735719.0, 735722.0, 735723.0, 735724.0, 735725.0, 735726.0, 735729.0, 735730.0, 735731.0, 735732.0, 735733.0, 735736.0, 735737.0, 735738.0, 735739.0, 735740.0, 735743.0, 735744.0, 735745.0, 735746.0, 735747.0, 735750.0, 735751.0, 735752.0, 735753.0, 735754.0, 735757.0, 735758.0, 735759.0, 735760.0, 735761.0, 735764.0, 735765.0, 735766.0, 735767.0, 735768.0, 735771.0, 735772.0, 735773.0, 735774.0, 735775.0, 735778.0, 735779.0, 735780.0, 735781.0, 735782.0, 735785.0, 735786.0, 735787.0, 735788.0, 735789.0, 735792.0, 735793.0, 735794.0, 735795.0, 735796.0, 735799.0, 735800.0, 735801.0, 735802.0, 735803.0, 735806.0, 735807.0, 735808.0, 735809.0, 735810.0, 735813.0, 735814.0, 735815.0, 735816.0, 735817.0, 735820.0, 735821.0, 735822.0, 735823.0, 735824.0, 735827.0, 735828.0, 735829.0, 735830.0, 735831.0, 735834.0, 735835.0, 735836.0, 735837.0, 735838.0, 735841.0, 735842.0, 735843.0, 735844.0, 735845.0, 735848.0, 735849.0, 735850.0, 735851.0, 735852.0, 735855.0, 735856.0, 735857.0, 735858.0, 735859.0, 735862.0, 735863.0, 735864.0, 735865.0, 735866.0, 735869.0, 735870.0, 735871.0, 735872.0, 735873.0, 735876.0, 735877.0, 735878.0, 735879.0, 735880.0, 735883.0, 735884.0, 735885.0, 735886.0, 735887.0, 735890.0, 735891.0, 735892.0, 735893.0, 735894.0, 735897.0, 735898.0, 735899.0, 735900.0, 735901.0, 735904.0, 735905.0, 735906.0, 735907.0, 735908.0, 735911.0, 735912.0, 735913.0, 735914.0, 735915.0, 735918.0, 735919.0, 735920.0, 735921.0, 735922.0, 735925.0, 735926.0, 735927.0, 735928.0, 735929.0, 735932.0, 735933.0, 735934.0, 735935.0, 735936.0]
close_r = [102.3, 101.25, 99.799999999999997, 99.799999999999997, 98.969999999999999, 96.810000000000002, 94.439999999999998, 98.409999999999997, 99.030000000000001, 101.5, 101.2, 102.2, 103.59999999999999, 102.75, 102.75, 102.75, 103.34999999999999, 102.0, 102.84999999999999, 102.84999999999999, 101.40000000000001, 98.260000000000005, 97.439999999999998, 97.879999999999995, 102.0, 99.709999999999994, 101.45, 102.45, 101.09999999999999, 103.3, 104.15000000000001, 104.90000000000001, 106.0, 106.25, 108.09999999999999, 109.84999999999999, 111.84999999999999, 111.0, 110.55, 112.25, 112.0, 113.09999999999999, 113.09999999999999, 113.90000000000001, 113.95, 112.2, 112.25, 113.59999999999999, 113.5, 115.8, 115.95, 114.95, 114.09999999999999, 114.90000000000001, 115.5, 115.84999999999999, 115.90000000000001, 116.55, 116.75, 117.55, 118.09999999999999, 117.75, 116.7, 117.84999999999999, 118.84999999999999, 118.59999999999999, 118.75, 117.55, 121.09999999999999, 120.7, 120.65000000000001, 122.40000000000001, 122.3, 122.34999999999999, 121.5, 121.8, 120.8, 121.8, 120.40000000000001, 119.75, 120.15000000000001, 121.40000000000001, 119.8, 120.2, 119.8, 119.8, 119.8, 121.3, 120.40000000000001, 122.45, 122.59999999999999, 122.25, 121.90000000000001, 122.55, 121.5, 119.84999999999999, 121.0, 123.2, 122.8, 121.09999999999999, 119.3, 121.34999999999999, 119.3, 116.0, 116.8, 116.8, 118.59999999999999, 116.05, 116.75, 116.3, 120.59999999999999, 118.84999999999999, 117.15000000000001, 116.65000000000001, 118.34999999999999, 117.3, 116.0, 118.55, 118.45, 118.7, 118.55, 118.34999999999999, 117.15000000000001, 120.15000000000001, 120.05, 117.3, 117.45, 116.05, 117.2, 115.95, 114.0, 112.84999999999999, 113.2, 115.65000000000001, 117.2, 114.90000000000001, 112.75, 113.3, 113.0, 113.75, 113.25, 118.65000000000001, 119.65000000000001, 119.25, 119.55, 119.95, 115.7, 113.45, 115.75, 114.3, 114.09999999999999, 112.05, 109.15000000000001, 109.75, 113.15000000000001, 116.59999999999999, 118.8, 118.84999999999999, 119.65000000000001, 120.55, 120.75, 121.0, 120.2, 118.95, 118.45, 117.55, 114.84999999999999, 116.25, 115.5, 117.05, 118.55, 119.75, 120.3, 121.95, 121.59999999999999, 120.55, 121.84999999999999, 118.40000000000001, 114.7, 115.84999999999999, 115.55, 115.40000000000001, 115.05, 112.40000000000001, 110.15000000000001, 107.0, 101.75, 106.45, 103.34999999999999, 106.8, 107.65000000000001, 106.84999999999999, 105.3, 106.0, 108.15000000000001, 104.8, 106.0, 106.55, 107.84999999999999, 105.84999999999999, 104.90000000000001, 104.59999999999999, 105.34999999999999, 106.0, 105.55, 103.3, 105.34999999999999, 102.05, 102.05, 100.55, 103.95, 101.65000000000001, 103.0, 105.65000000000001, 104.5, 105.65000000000001, 108.7, 109.45, 109.25, 109.40000000000001, 110.45, 110.15000000000001, 108.8, 107.3, 109.90000000000001, 110.34999999999999, 110.45, 109.0, 109.65000000000001, 113.34999999999999, 115.90000000000001, 116.40000000000001, 117.25, 118.55, 118.34999999999999, 117.90000000000001, 119.45, 120.65000000000001, 120.95, 121.55, 122.7, 121.34999999999999, 121.2, 122.95, 121.2, 119.65000000000001, 120.59999999999999, 123.65000000000001, 114.5, 114.95, 116.25, 116.09999999999999, 114.15000000000001, 116.3, 116.7, 116.0, 115.5, 109.75, 108.0, 105.55, 105.45]
volume_r = [852500.0, 536100.0, 858200.0, 563800.0, 843100.0, 1063900.0, 1185800.0, 2700900.0, 1804300.0, 1135900.0, 1301200.0, 512100.0, 649900.0, 145100.0, 0.0, 0.0, 474200.0, 501200.0, 117900.0, 0.0, 598500.0, 1100800.0, 1380400.0, 752400.0, 999700.0, 871900.0, 637600.0, 686700.0, 754300.0, 1227400.0, 1071400.0, 591300.0, 830200.0, 1171300.0, 1261100.0, 1339100.0, 939900.0, 899800.0, 1044100.0, 982200.0, 1053400.0, 734400.0, 929000.0, 712400.0, 562200.0, 836500.0, 895600.0, 752500.0, 512700.0, 882900.0, 761500.0, 578600.0, 917500.0, 717800.0, 797000.0, 1526900.0, 833400.0, 872500.0, 604500.0, 665300.0, 779000.0, 658300.0, 562500.0, 695000.0, 734800.0, 720300.0, 656400.0, 805400.0, 1049600.0, 629000.0, 856600.0, 840400.0, 782100.0, 695800.0, 955900.0, 1554300.0, 686300.0, 714500.0, 654200.0, 1116000.0, 780700.0, 847600.0, 1090400.0, 808800.0, 601000.0, 0.0, 0.0, 782200.0, 633900.0, 638200.0, 708000.0, 780500.0, 771300.0, 706700.0, 907100.0, 1606300.0, 890700.0, 1005200.0, 768200.0, 1087100.0, 1066000.0, 1013500.0, 787800.0, 1076100.0, 1226600.0, 0.0, 658000.0, 829100.0, 887500.0, 1063400.0, 1016900.0, 746500.0, 951400.0, 736300.0, 556500.0, 759400.0, 722500.0, 855300.0, 520400.0, 417800.0, 474400.0, 75000.0, 633500.0, 914100.0, 558500.0, 1198100.0, 711800.0, 870500.0, 667400.0, 877800.0, 849900.0, 761800.0, 912000.0, 1156800.0, 1223900.0, 965400.0, 1193500.0, 1074900.0, 1038300.0, 965600.0, 3614900.0, 1482900.0, 904400.0, 904400.0, 937400.0, 976900.0, 1748100.0, 1468300.0, 1271600.0, 701300.0, 636300.0, 992000.0, 1545700.0, 1054500.0, 1363300.0, 1257800.0, 1073900.0, 722800.0, 588700.0, 951800.0, 811000.0, 734900.0, 744800.0, 643900.0, 539000.0, 604100.0, 816900.0, 678900.0, 1383400.0, 659700.0, 770100.0, 724300.0, 519300.0, 878300.0, 625300.0, 685500.0, 526000.0, 894900.0, 1349400.0, 594600.0, 487900.0, 602800.0, 452900.0, 837900.0, 1007200.0, 1541900.0, 3497200.0, 2304900.0, 2530300.0, 1380400.0, 798400.0, 756500.0, 1297400.0, 1010100.0, 1049200.0, 1162000.0, 498300.0, 835000.0, 921500.0, 814100.0, 792500.0, 845500.0, 594200.0, 716800.0, 742600.0, 2318800.0, 686200.0, 1332500.0, 921700.0, 1246000.0, 1005300.0, 786300.0, 1259400.0, 1149000.0, 1371300.0, 931500.0, 879600.0, 690300.0, 894900.0, 871400.0, 776100.0, 527800.0, 771800.0, 635700.0, 749900.0, 915200.0, 506400.0, 758000.0, 649200.0, 1149600.0, 1113000.0, 848000.0, 1219600.0, 837000.0, 749400.0, 746000.0, 904500.0, 933400.0, 919000.0, 913200.0, 1257400.0, 669900.0, 818400.0, 664300.0, 820600.0, 998200.0, 825900.0, 831700.0, 3691100.0, 1499500.0, 1123500.0, 770000.0, 1012600.0, 914400.0, 700600.0, 523400.0, 1221300.0, 2563200.0, 1490100.0, 2648700.0, 1789600.0]

date_d, close_d = reord(date_r, close_r)
date_d, volume_d = reord(date_r, volume_r)


#print(date_d)
#print(close_d)

#[(i,i) for i in range(len(close_d))]

#pylab.plot(date_d,close_d,linewidth = 1.0,color="blue")
#pylab.plot([(i,i) for i in range(len(close_d))],close_d,linewidth = 1.0,color="blue")
#pylab.plot([(i,i) for i in range(len(volume_d))],volume_d,linewidth = 1.0,color="red")

def set_day_color(close_d):
    """
    Calcul de la couleur de chaque jour
    en fonction du cours Ã  la cloture
    """
    day_color = ["black"]
    for i in range(1,len(close_d)):
        if close_d[i] > close_d[i-1]:
            day_color.append("green")
        else:
            day_color.append("red")
    return day_color


def graphique(volume_d, close_d):
    """
    Exemple de graphique
    """
    maxl = len(volume_d)
    size  = (1000,500)
    index = plt.arange(maxl)

    #ouverture d'une fenetre graphique
    #fig = plt.figure(figsize=(size[0]/100, size[1]/100))
    fig1, ax1 = plt.subplots(figsize=(size[0]/100, size[1]/100))

    # calcul de la couleur de chaque jour
    day_color = set_day_color(close_d)

    #construction du graphique des volumes
    for i in range(0,maxl):
        ax1.plot([i, i],[0,volume_d[i]],linewidth = 2.0,color=day_color[i])
    #ajout des legendes
    plt.title("Action Air Liquide")
    plt.xlabel("Date")
    plt.ylabel("Volume")
    xlabels = ["" for i in index]
    for i in range (0,maxl,maxl/20):
        jj = maxl-1
        xlabels[i] = md.num2date(date_d[jj-i]).strftime('%Y,%m,%d')
    plt.xticks(index, xlabels, fontsize ="small",rotation=20)

    #construction du graphique du cours de cloture
    ax2 = ax1.twinx()
    plt.ylim(min(close_d)*0.6, max(close_d)*1.1)
    ax2.plot([(i,i) for i in range(0,maxl)],close_d,linewidth = 1.0,color="blue")
    for tl in ax2.get_yticklabels():
        tl.set_color('b')
    plt.ylabel("Cours en euros",color="blue")

    #pour voir le graphique
    plt.show()
    #fermer la fenetre graphique pour pouvoir reprendre la main dans l'editeur de commande
    return


graphique(volume_d,close_d)
